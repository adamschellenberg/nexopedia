{"ast":null,"code":"import ItemsJSON from '../assets/jsons/items.json';\nimport NexomonJSON from '../assets/jsons/nexomon-extinction.json';\nimport StatusJSON from '../assets/jsons/status-effects.json';\nimport TypeJSON from '../assets/jsons/type-effectiveness.json';\nimport VaultJSON from '../assets/jsons/vaults-and-keys.json';\nimport { useHistory } from 'react-router-dom';\nexport const server_calls = {\n  items: () => {\n    let result = ItemsJSON;\n    return result;\n  },\n  nexomon: async () => {\n    const response = await fetch('http://128.199.5.111/api/nexomon/all', {\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let data = await response;\n    console.log(data);\n    return data;\n  },\n  status: () => {\n    let result = StatusJSON;\n    return result;\n  },\n  type: () => {\n    let result = TypeJSON;\n    return result;\n  },\n  vaults: () => {\n    let result = VaultJSON;\n    return result;\n  },\n  signin: async (email, password) => {\n    const response = await fetch('http://127.0.0.1:5000/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to login');\n    }\n    ;\n    let data = await response.json();\n    console.log('Token: ', data.token);\n    return alert('Successfully signed in!');\n  },\n  signup: async (email, password) => {\n    const response = await fetch('http://127.0.0.1:5000/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create new account');\n    }\n    ;\n    server_calls.signin(email, password);\n    let data = await response.json();\n    console.log('Response: ', data.success);\n    return alert('Successfully created an account!');\n  },\n  logout: () => {}\n};","map":{"version":3,"names":["ItemsJSON","NexomonJSON","StatusJSON","TypeJSON","VaultJSON","useHistory","server_calls","items","result","nexomon","response","fetch","mode","headers","data","console","log","status","type","vaults","signin","email","password","method","body","JSON","stringify","ok","Error","json","token","alert","signup","success","logout"],"sources":["C:/Users/adams/Documents/Nexopedia/frontend/src/api/server.js"],"sourcesContent":["import ItemsJSON from '../assets/jsons/items.json';\r\nimport NexomonJSON from '../assets/jsons/nexomon-extinction.json';\r\nimport StatusJSON from '../assets/jsons/status-effects.json';\r\nimport TypeJSON from '../assets/jsons/type-effectiveness.json';\r\nimport VaultJSON from '../assets/jsons/vaults-and-keys.json';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport const server_calls = {\r\n    items: () => {\r\n        let result = ItemsJSON;\r\n        return result;\r\n    },\r\n\r\n    nexomon: async () => {\r\n        const response = await fetch('http://128.199.5.111/api/nexomon/all', {\r\n            mode: 'no-cors',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        let data = await response;\r\n        console.log(data);\r\n        return data;\r\n    },\r\n\r\n    status: () => {\r\n        let result = StatusJSON;\r\n        return result;\r\n    },\r\n\r\n    type: () => {\r\n        let result = TypeJSON;\r\n        return result;\r\n    },\r\n\r\n    vaults: () => {\r\n        let result = VaultJSON;\r\n        return result;\r\n    },\r\n\r\n    signin: async (email, password) => {\r\n        const response = await fetch('http://127.0.0.1:5000/signin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to login')\r\n        };\r\n        let data = await response.json()\r\n        console.log ('Token: ', data.token);\r\n        return alert('Successfully signed in!');\r\n    },\r\n\r\n    signup: async (email, password) => {\r\n        const response = await fetch('http://127.0.0.1:5000/signup', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to create new account')\r\n        };\r\n        server_calls.signin(email, password);\r\n        let data = await response.json()\r\n        console.log('Response: ', data.success);\r\n\r\n        return alert('Successfully created an account!');\r\n    },\r\n\r\n    logout: () => {\r\n\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,4BAA4B;AAClD,OAAOC,WAAW,MAAM,yCAAyC;AACjE,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,SAASC,UAAU,QAAQ,kBAAkB;AAG7C,OAAO,MAAMC,YAAY,GAAG;EACxBC,KAAK,EAAE,MAAM;IACT,IAAIC,MAAM,GAAGR,SAAS;IACtB,OAAOQ,MAAM;EACjB,CAAC;EAEDC,OAAO,EAAE,YAAY;IACjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;MACjEC,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAIC,IAAI,GAAG,MAAMJ,QAAQ;IACzBK,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC;EAEDG,MAAM,EAAE,MAAM;IACV,IAAIT,MAAM,GAAGN,UAAU;IACvB,OAAOM,MAAM;EACjB,CAAC;EAEDU,IAAI,EAAE,MAAM;IACR,IAAIV,MAAM,GAAGL,QAAQ;IACrB,OAAOK,MAAM;EACjB,CAAC;EAEDW,MAAM,EAAE,MAAM;IACV,IAAIX,MAAM,GAAGJ,SAAS;IACtB,OAAOI,MAAM;EACjB,CAAC;EAEDY,MAAM,EAAE,OAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC/B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MACzDY,MAAM,EAAE,MAAM;MACdV,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBL,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACd,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACZ,QAAQ,CAACiB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,iBAAiB,CAAC;IACvC;IAAC;IACD,IAAId,IAAI,GAAG,MAAMJ,QAAQ,CAACmB,IAAI,EAAE;IAChCd,OAAO,CAACC,GAAG,CAAE,SAAS,EAAEF,IAAI,CAACgB,KAAK,CAAC;IACnC,OAAOC,KAAK,CAAC,yBAAyB,CAAC;EAC3C,CAAC;EAEDC,MAAM,EAAE,OAAOX,KAAK,EAAEC,QAAQ,KAAK;IAC/B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MACzDY,MAAM,EAAE,MAAM;MACdV,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBL,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACd,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACZ,QAAQ,CAACiB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,8BAA8B,CAAC;IACpD;IAAC;IACDtB,YAAY,CAACc,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC;IACpC,IAAIR,IAAI,GAAG,MAAMJ,QAAQ,CAACmB,IAAI,EAAE;IAChCd,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,IAAI,CAACmB,OAAO,CAAC;IAEvC,OAAOF,KAAK,CAAC,kCAAkC,CAAC;EACpD,CAAC;EAEDG,MAAM,EAAE,MAAM,CAEd;AACJ,CAAC"},"metadata":{},"sourceType":"module"}