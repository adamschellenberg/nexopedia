{"ast":null,"code":"var _s = $RefreshSig$();\nimport Cookies from 'js-cookie';\nimport { useNavigate } from 'react-router-dom';\nconst base_url = 'http://128.199.5.111/api';\nconst base_url_heroku = 'https://ct-nexopedia-adamschellenberg.herokuapp.com';\nconst base_url_testing = 'http://127.0.0.1:5000';\nexport const server_calls = {\n  items: async () => {\n    const response = await fetch(`${base_url}/item/all`);\n    let data = await response.json();\n    return data;\n  },\n  nexomon: async () => {\n    const response = await fetch(`${base_url}/nexomon/all`);\n    let data = await response.json();\n    return data;\n  },\n  status: async () => {\n    const response = await fetch(`${base_url}/statusEffect/all`);\n    let data = await response.json();\n    return data;\n  },\n  type: async () => {\n    const response = await fetch(`${base_url}/typeeffectiveness/all`);\n    let data = await response.json();\n    return data;\n  },\n  vaults: async () => {\n    const response = await fetch(`${base_url}/vault/all`);\n    let data = await response.json();\n    return data;\n  },\n  keys: async () => {\n    const response = await fetch(`${base_url}/key/all`);\n    let data = await response.json();\n    return data;\n  },\n  signin: _s(async (email, password) => {\n    _s();\n    const response = await fetch(`${base_url_heroku}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to login');\n    }\n    ;\n    let data = await response.json();\n    let navigate = useNavigate();\n    Cookies.set('nexopedia-token', data.token, {\n      expires: 2\n    });\n    return navigate('/');\n  }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n    return [useNavigate];\n  }),\n  signup: async (email, password) => {\n    const response = await fetch(`${base_url_heroku}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create new account');\n    }\n    ;\n    server_calls.signin(email, password);\n    let data = await response.json();\n    server_calls.signin(email, password);\n    return alert('Successfully created an account!');\n  },\n  logout: () => {},\n  updateAvatar: async (token, avatar) => {\n    const response = await fetch(`${base_url_heroku}/avatar/update`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: avatar,\n        token: token\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update avatar');\n    }\n    ;\n    console.log('testing update call');\n    let data = await response.json();\n    console.log('Update response: ', data);\n    return data;\n  },\n  getAvatar: async token => {\n    const response = await fetch(`${base_url_heroku}/avatar`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        token: token\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch avatar data');\n    }\n    return await response.json();\n  }\n};","map":{"version":3,"names":["Cookies","useNavigate","base_url","base_url_heroku","base_url_testing","server_calls","items","response","fetch","data","json","nexomon","status","type","vaults","keys","signin","email","password","method","headers","body","JSON","stringify","ok","Error","navigate","set","token","expires","signup","alert","logout","updateAvatar","avatar","console","log","getAvatar"],"sources":["C:/Users/adams/Documents/Nexopedia/frontend/src/api/server.js"],"sourcesContent":["import Cookies from 'js-cookie';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst base_url = 'http://128.199.5.111/api';\r\nconst base_url_heroku = 'https://ct-nexopedia-adamschellenberg.herokuapp.com';\r\nconst base_url_testing = 'http://127.0.0.1:5000'\r\n\r\nexport const server_calls = {\r\n    \r\n    items: async () => {\r\n        const response = await fetch(`${base_url}/item/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    nexomon: async () => {\r\n        const response = await fetch(`${base_url}/nexomon/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    status: async () => {\r\n        const response = await fetch(`${base_url}/statusEffect/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    type: async () => {\r\n        const response = await fetch(`${base_url}/typeeffectiveness/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    vaults: async () => {\r\n        const response = await fetch(`${base_url}/vault/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    keys: async () => {\r\n        const response = await fetch(`${base_url}/key/all`);\r\n        let data = await response.json();\r\n        return data;    \r\n    },\r\n\r\n    signin: async (email, password) => {\r\n        const response = await fetch(`${base_url_heroku}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to login')\r\n        };\r\n        let data = await response.json()\r\n        let navigate = useNavigate();\r\n        Cookies.set('nexopedia-token', data.token, {expires: 2 });\r\n        return navigate('/')\r\n    },\r\n\r\n    signup: async (email, password) => {\r\n        const response = await fetch(`${base_url_heroku}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to create new account')\r\n        };\r\n        server_calls.signin(email, password);\r\n        let data = await response.json()\r\n        server_calls.signin(email, password);\r\n\r\n        return alert('Successfully created an account!');\r\n    },\r\n\r\n    logout: () => {\r\n\r\n    },\r\n\r\n    updateAvatar: async (token, avatar) => {\r\n        const response = await fetch(`${base_url_heroku}/avatar/update`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify( {\r\n                avatar: avatar,\r\n                token: token\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to update avatar');\r\n        };\r\n        console.log('testing update call');\r\n        let data = await response.json();\r\n        console.log('Update response: ', data);\r\n        return data;\r\n    },\r\n\r\n    getAvatar: async (token) => {\r\n        const response = await fetch(`${base_url_heroku}/avatar`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify( {\r\n                token: token\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch avatar data')\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}