{"ast":null,"code":"import ItemsJSON from '../assets/jsons/items.json';\nimport NexomonJSON from '../assets/jsons/nexomon-extinction.json';\nimport StatusJSON from '../assets/jsons/status-effects.json';\nimport TypeJSON from '../assets/jsons/type-effectiveness.json';\nimport VaultJSON from '../assets/jsons/vaults-and-keys.json';\nimport { useHistory } from 'react-router-dom';\nconst base_url = 'http://128.199.5.111/api';\nexport const server_calls = {\n  items: async () => {\n    const response = await fetch(`${base_url}/item/all`);\n    let data = await response;\n    console.log(data);\n    return data;\n  },\n  nexomon: async () => {\n    const response = await fetch(`${base_url}/api/nexomon/all`);\n    let data = await response.json();\n    return data;\n  },\n  status: () => {\n    let result = StatusJSON;\n    return result;\n  },\n  type: () => {\n    let result = TypeJSON;\n    return result;\n  },\n  vaults: () => {\n    let result = VaultJSON;\n    return result;\n  },\n  signin: async (email, password) => {\n    const response = await fetch('https://ct-nexopedia-adamschellenberg.herokuapp.com/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to login');\n    }\n    ;\n    let data = await response.json();\n    console.log('Token: ', data.token);\n    return alert('Successfully signed in!');\n  },\n  signup: async (email, password) => {\n    const response = await fetch('https://ct-nexopedia-adamschellenberg.herokuapp.com/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create new account');\n    }\n    ;\n    server_calls.signin(email, password);\n    let data = await response.json();\n    console.log('Response: ', data.success);\n    return alert('Successfully created an account!');\n  },\n  logout: () => {}\n};","map":{"version":3,"names":["ItemsJSON","NexomonJSON","StatusJSON","TypeJSON","VaultJSON","useHistory","base_url","server_calls","items","response","fetch","data","console","log","nexomon","json","status","result","type","vaults","signin","email","password","method","headers","body","JSON","stringify","ok","Error","token","alert","signup","success","logout"],"sources":["C:/Users/adams/Documents/Nexopedia/frontend/src/api/server.js"],"sourcesContent":["import ItemsJSON from '../assets/jsons/items.json';\r\nimport NexomonJSON from '../assets/jsons/nexomon-extinction.json';\r\nimport StatusJSON from '../assets/jsons/status-effects.json';\r\nimport TypeJSON from '../assets/jsons/type-effectiveness.json';\r\nimport VaultJSON from '../assets/jsons/vaults-and-keys.json';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst base_url = 'http://128.199.5.111/api';\r\n\r\nexport const server_calls = {\r\n    \r\n    items: async () => {\r\n        const response = await fetch(`${base_url}/item/all`);\r\n        let data = await response;\r\n        console.log(data);\r\n        return data;\r\n    },\r\n\r\n    nexomon: async () => {\r\n        const response = await fetch(`${base_url}/api/nexomon/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    status: () => {\r\n        let result = StatusJSON;\r\n        return result;\r\n    },\r\n\r\n    type: () => {\r\n        let result = TypeJSON;\r\n        return result;\r\n    },\r\n\r\n    vaults: () => {\r\n        let result = VaultJSON;\r\n        return result;\r\n    },\r\n\r\n    signin: async (email, password) => {\r\n        const response = await fetch('https://ct-nexopedia-adamschellenberg.herokuapp.com/signin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to login')\r\n        };\r\n        let data = await response.json()\r\n        console.log ('Token: ', data.token);\r\n        return alert('Successfully signed in!');\r\n    },\r\n\r\n    signup: async (email, password) => {\r\n        const response = await fetch('https://ct-nexopedia-adamschellenberg.herokuapp.com/signup', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to create new account')\r\n        };\r\n        server_calls.signin(email, password);\r\n        let data = await response.json()\r\n        console.log('Response: ', data.success);\r\n\r\n        return alert('Successfully created an account!');\r\n    },\r\n\r\n    logout: () => {\r\n\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,4BAA4B;AAClD,OAAOC,WAAW,MAAM,yCAAyC;AACjE,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,MAAMC,QAAQ,GAAG,0BAA0B;AAE3C,OAAO,MAAMC,YAAY,GAAG;EAExBC,KAAK,EAAE,YAAY;IACf,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,WAAU,CAAC;IACpD,IAAIK,IAAI,GAAG,MAAMF,QAAQ;IACzBG,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC;EAEDG,OAAO,EAAE,YAAY;IACjB,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,kBAAiB,CAAC;IAC3D,IAAIK,IAAI,GAAG,MAAMF,QAAQ,CAACM,IAAI,EAAE;IAChC,OAAOJ,IAAI;EACf,CAAC;EAEDK,MAAM,EAAE,MAAM;IACV,IAAIC,MAAM,GAAGf,UAAU;IACvB,OAAOe,MAAM;EACjB,CAAC;EAEDC,IAAI,EAAE,MAAM;IACR,IAAID,MAAM,GAAGd,QAAQ;IACrB,OAAOc,MAAM;EACjB,CAAC;EAEDE,MAAM,EAAE,MAAM;IACV,IAAIF,MAAM,GAAGb,SAAS;IACtB,OAAOa,MAAM;EACjB,CAAC;EAEDG,MAAM,EAAE,OAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC/B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4D,EAAE;MACvFa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBN,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACd,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACmB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,iBAAiB,CAAC;IACvC;IAAC;IACD,IAAIlB,IAAI,GAAG,MAAMF,QAAQ,CAACM,IAAI,EAAE;IAChCH,OAAO,CAACC,GAAG,CAAE,SAAS,EAAEF,IAAI,CAACmB,KAAK,CAAC;IACnC,OAAOC,KAAK,CAAC,yBAAyB,CAAC;EAC3C,CAAC;EAEDC,MAAM,EAAE,OAAOX,KAAK,EAAEC,QAAQ,KAAK;IAC/B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4D,EAAE;MACvFa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBN,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACd,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACmB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,8BAA8B,CAAC;IACpD;IAAC;IACDtB,YAAY,CAACa,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC;IACpC,IAAIX,IAAI,GAAG,MAAMF,QAAQ,CAACM,IAAI,EAAE;IAChCH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,IAAI,CAACsB,OAAO,CAAC;IAEvC,OAAOF,KAAK,CAAC,kCAAkC,CAAC;EACpD,CAAC;EAEDG,MAAM,EAAE,MAAM,CAEd;AACJ,CAAC"},"metadata":{},"sourceType":"module"}