{"ast":null,"code":"import Cookies from 'js-cookie';\nconst base_url = 'http://128.199.5.111/api';\nconst base_url_heroku = 'https://ct-nexopedia-adamschellenberg.herokuapp.com';\nconst base_url_testing = 'http://127.0.0.1:5000';\nexport const server_calls = {\n  items: async () => {\n    const response = await fetch(`${base_url}/item/all`);\n    let data = await response.json();\n    return data;\n  },\n  nexomon: async () => {\n    const response = await fetch(`${base_url}/nexomon/all`);\n    let data = await response.json();\n    return data;\n  },\n  status: async () => {\n    const response = await fetch(`${base_url}/statusEffect/all`);\n    let data = await response.json();\n    return data;\n  },\n  type: async () => {\n    const response = await fetch(`${base_url}/typeeffectiveness/all`);\n    let data = await response.json();\n    return data;\n  },\n  vaults: async () => {\n    const response = await fetch(`${base_url}/vault/all`);\n    let data = await response.json();\n    return data;\n  },\n  keys: async () => {\n    const response = await fetch(`${base_url}/key/all`);\n    let data = await response.json();\n    return data;\n  },\n  signin: async (email, password) => {\n    const response = await fetch(`${base_url_testing}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to login');\n    }\n    ;\n    let data = await response.json();\n    console.log('Token: ', data.token);\n    Cookies.set('nexopedia-token', data.token, {\n      expires: 2\n    });\n    return alert('Successfully signed in!');\n  },\n  signup: async (email, password) => {\n    const response = await fetch(`${base_url_testing}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create new account');\n    }\n    ;\n    server_calls.signin(email, password);\n    let data = await response.json();\n    console.log('Response: ', data.success);\n    return alert('Successfully created an account!');\n  },\n  logout: () => {},\n  updateAvatar: async (token, avatar) => {\n    const response = await fetch(`${base_url_testing}/avatar/update`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update avatar');\n    }\n    ;\n    let data = await response.json();\n    console.log('Update response: ', data);\n    return data;\n  }\n};","map":{"version":3,"names":["Cookies","base_url","base_url_heroku","base_url_testing","server_calls","items","response","fetch","data","json","nexomon","status","type","vaults","keys","signin","email","password","method","headers","body","JSON","stringify","ok","Error","console","log","token","set","expires","alert","signup","success","logout","updateAvatar","avatar"],"sources":["C:/Users/adams/Documents/Nexopedia/frontend/src/api/server.js"],"sourcesContent":["import Cookies from 'js-cookie';\r\n\r\nconst base_url = 'http://128.199.5.111/api';\r\nconst base_url_heroku = 'https://ct-nexopedia-adamschellenberg.herokuapp.com';\r\nconst base_url_testing = 'http://127.0.0.1:5000'\r\n\r\nexport const server_calls = {\r\n    \r\n    items: async () => {\r\n        const response = await fetch(`${base_url}/item/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    nexomon: async () => {\r\n        const response = await fetch(`${base_url}/nexomon/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    status: async () => {\r\n        const response = await fetch(`${base_url}/statusEffect/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    type: async () => {\r\n        const response = await fetch(`${base_url}/typeeffectiveness/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    vaults: async () => {\r\n        const response = await fetch(`${base_url}/vault/all`);\r\n        let data = await response.json();\r\n        return data;\r\n    },\r\n\r\n    keys: async () => {\r\n        const response = await fetch(`${base_url}/key/all`);\r\n        let data = await response.json();\r\n        return data;    \r\n    },\r\n\r\n    signin: async (email, password) => {\r\n        const response = await fetch(`${base_url_testing}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to login')\r\n        };\r\n        let data = await response.json()\r\n        console.log ('Token: ', data.token);\r\n        Cookies.set('nexopedia-token', data.token, {expires: 2 });\r\n        return alert('Successfully signed in!');\r\n    },\r\n\r\n    signup: async (email, password) => {\r\n        const response = await fetch(`${base_url_testing}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to create new account')\r\n        };\r\n        server_calls.signin(email, password);\r\n        let data = await response.json()\r\n        console.log('Response: ', data.success);\r\n\r\n        return alert('Successfully created an account!');\r\n    },\r\n\r\n    logout: () => {\r\n\r\n    },\r\n\r\n    updateAvatar: async (token, avatar) => {\r\n        const response = await fetch(`${base_url_testing}/avatar/update`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify( {\r\n                avatar: avatar\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error ('Failed to update avatar');\r\n        };\r\n        let data = await response.json();\r\n        console.log('Update response: ', data);\r\n        return data;\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}